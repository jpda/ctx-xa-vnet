{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vhdStorageAccount": {
            "type": "string",
            "defaultValue": "[toLower(substring(concat('xenapp',uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",
            "metadata": {
                "description": "Specifies the name of the storage account used for virtual machine disks. This has to be a unique name, up to 24 chars, all lowercase."
            }
        },
        "vhdStorageType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "Specifies the type of storage account, if being created."
            }
        },
        "vhdStorageGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the resource group which should contain the storage account."
            }
        },
        "vhdStorageNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Specifies whether the storage account should be created or already exists."
            }
        },
        "userImageContainerName": {
            "type": "string",
            "defaultValue": "images3",
            "metadata": {
                "description": "Specifies a storage container in the account specified by 'vhdStorageAccount' in which user images of XenApp 7.7 reside."
            }
        },
        "imageType": {
            "type": "string",
            "defaultValue": "Gallery",
            "allowedValues": [
                "Gallery",
                "User"
            ],
            "metadata": {
                "description": "Specifies whether the template should deploy from the Azure Marketplace gallery or from user images in the storage account specified by 'vhdStorageAccount."
            }
        },
        "imageQualifier": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "",
                "-preview"
            ],
            "metadata": {
                "description": "Specifies an additional qualifier to use for Marketplace image references. The value 'preview' is for images in staging, while the default value references production images."
            }
        },
        "vdaVersion": {
            "type": "string",
            "defaultValue": "coldfire",
            "allowedValues": [
                "coldfire",
                "server2016"
            ],
            "metadata": {
                "description": "Specifies an additional qualifier to use for Marketplace image references. The value 'preview' is for images in staging, while the default value references production images."
            }
        },
        "publicDnsName": {
            "type": "string",
            "defaultValue": "[toLower(substring(concat('xenapp', uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",
            "metadata": {
                "description": "Specifies a unique public DNS prefix for the deployment. This will produce a FQDN of the form '<publicDnsName>.<location>.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
            }
        },
        "publicIpGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the resource group which should contain the public IP."
            }
        },
        "publicIpName": {
            "type": "string",
            "defaultValue": "PublicIp",
            "metadata": {
                "description": "Specifies the resource name for the public IP. New IPs will take this name, while references to existing ones should be valid."
            }
        },
        "publicIpNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Specifies whether the public IP should be created or already exists."
            }
        },
        "machineSize": {
            "type": "string",
            "defaultValue": "Standard_A2",
            "metadata": {
                "description": "Specifies the size of the virtual machines (6)."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the Location for the deployment."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the administrator for machines, Active Directory domain, NetScaler and XenApp. Exclusion list: 'admin','administrator'. Must be no more than 9 alphanumeric characters."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Specifies the password of the administrator for machines, Active Directory domain, NetScaler and XenApp."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "xenapp.local",
            "metadata": {
                "description": "Specifies the name of the newly created Active Directory domain."
            }
        },
        "siteName": {
            "type": "string",
            "defaultValue": "XenAppOnAzure",
            "metadata": {
                "description": "Specifies the name of the XenApp site."
            }
        },
        "html5Mode": {
            "type": "string",
            "defaultValue": "Fallback",
            "allowedValues": [
                "Always",
                "Fallback",
                "Off"
            ],
            "metadata": {
                "description": "Specifies whether HTML5 Reciever is to be used."
            }
        },
        "emailAddress": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the email address that that will be used to request a public SSL certificate for NetScaler gateway from letsencrypt.org on your behalf. This will also be used to notify you when the template has deployed successfully."
            }
        },
        "certificateAuthority": {
            "type": "string",
            "defaultValue": "ACME",
            "allowedValues": [
                "ACME",
                "Enterprise"
            ],
            "metadata": {
                "description": "Specifies whether an ACME CA or the internal Enterprise CA should be used for obtaining certificates."
            }
        },
        "acmeServer": {
            "type": "string",
            "defaultValue": "https://acme-v01.api.letsencrypt.org/",
            "allowedValues": [
                "https://acme-staging.api.letsencrypt.org/",
                "https://acme-v01.api.letsencrypt.org/"
            ],
            "metadata": {
                "description": "Specifies the ACME protocol server used for public TLS certificate requests. Allowed values correspond to letsencrypt.org staging or production."
            }
        },
        "customInboundRules": {
            "type": "object",
            "defaultValue": {
                "rules": [],
                "assignments": {
                    "deliveryController": [],
                    "domainController": [],
                    "jumpBox": [],
                    "netScaler": [],
                    "vda": [],
                    "vdi": []
                }
            },
            "metadata": {
                "description": "Specifies additional inbound NAT rules to apply in this deployment. Useful for exposing individual machines more directly. The parameter is specified as an object, as in the default. See variable 'loadBalancerSettings' for an example format."
            }
        },
        "customApplications": {
            "type": "object",
            "defaultValue": {
                "chocolateyPackages": [],
                "publishedApplications": [],
                "appGroups": []
            },
            "metadata": {
                "description": "Specifies additional applications to be installed on the VDA and published through XenApp. The parameter is specified as an array of objects, as in the default. See variables 'applications', 'vdaSettings', and 'storeFrontSettings' for an example format. "
            }
        },
        "artifactsBaseUrl": {
            "type": "string",
            "metadata": {
                "artifactsBaseUrl": "",
                "description": "Specifies the base location of the child templates and desired state configuration scripts."
            },
            "defaultValue": "https://gallery.azure.com/artifact/20151001/citrix.citrix-xacitrix-xa-trial.1.0.27/Artifacts"
        },
        "extArtifactsBaseUrl": {
            "type": "string",
            "metadata": {
                "artifactsBaseUrl": "",
                "description": "Base location of extension templates"
            },
            "defaultValue": ""
        },
        "artifactsBaseUrlSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "Specifies the shared access signature token which provides access to the base artifacts location."
            },
            "defaultValue": ""
        },
        "azureGov": {
            "type": "string",
            "metadata": {
                "description": "Specifies the shared access signature token which provides access to the base artifacts location."
            },
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ]
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Specifies whether the virtual network should be created or already exists."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Existing VNET Name"
            }
        },
        "virtualNetworkResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Resource Group VNET is deployed in"
            }
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet inside the target VNET"
            }
        },
        "vnetAddressRange": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Virtual network address range (if creating new)"
            }
        },
        "subnetAddressRange": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "Subnet address range (if creating new)"
            }
        },
        "dnsServers": {
            "type": "array",
            "defaultValue": [
                "10.0.0.8"
            ],
            "metadata": {
                "description": "DNS server address in the VNet"
            }
        },
        "deliveryControllerPrivateIp": {
            "type": "string",
            "defaultValue": "10.0.0.9",
            "metadata": {
                "description": "Private IP for delivery controller"
            }
        },
        "netscalerPrivateIp": {
            "type": "string",
            "defaultValue": "10.0.0.11",
            "metadata": {
                "description": "NetScaler private IP"
            }
        },
        "vdaPrivateIp": {
            "type": "string",
            "defaultValue": "10.0.0.14",
            "metadata": {
                "description": "VDA private IP"
            }
        },
        "vdiPrivateIp": {
            "type": "string",
            "defaultValue": "10.0.0.15",
            "metadata": {
                "description": "VDI private IP"
            }
        },
        "domainControllerMachineName": {
            "type": "string",
            "defaultValue": "XA-DC",
            "metadata": {
                "description": "Domain controller machine name"
            }
        },
        "domainControllerFqdn": {
            "type": "string",
            "defaultValue": ""
        }
    },
    "variables": {
        "artifactsLocation": "[concat(parameters('artifactsBaseUrl'),'/')]",
        "extArtifactLocation": "[concat(parameters('extArtifactsBaseUrl'),'/')]",
        "artifactsLocationSasToken": "[parameters('artifactsBaseUrlSasToken')]",
        "deploymentFQDNPublicCloudtrue": "[concat(parameters('publicDnsName'), '.', parameters('location'), '.cloudapp.azure.com')]",
        "deploymentFQDNPublicCloudfalse": "[concat(parameters('publicDnsName'), '.', parameters('location'), '.cloudapp.usgovcloudapi.net')]",
        "deployFQDN": {
            "true": {
                "deploymentFQDN": "[concat(parameters('publicDnsName'), '.', parameters('location'), '.cloudapp.usgovcloudapi.net')]"
            },
            "false": {
                "deploymentFQDN": "[concat(parameters('publicDnsName'), '.', parameters('location'), '.cloudapp.azure.com')]"
            }
        },
        "currentDeployFQDN": "[variables('deployFQDN')[parameters('azureGov')]]",
        "deploymentFQDN": "[variables('currentDeployFQDN').deploymentFQDN]",
        "gatewayFQDN": "[concat(parameters('publicDnsName'), '-', parameters('location'), '.xenapponazure.com')]",
        "userImageContainerName": "[parameters('userImageContainerName')]",
        "userImageLocation": "[concat('http://', parameters('vhdStorageAccount'), '.blob.core.windows.net/', variables('userImageContainerName'), '/')]",
        "dscVersion": "2.26",
        "vnetName": "[parameters('virtualNetworkName')]",
        "vnetAddressRange": "[parameters('vnetAddressRange')]",
        "subnetName": "[parameters('subnetName')]",
        "subnetId": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/', variables('subnetName'))]",
        "dnsServers": "[parameters('dnsServers')]",
        "subnetAddressRange": "[parameters('subnetName')]",
        "creatingVirtualNetworkUrl": "[concat(variables('extArtifactLocation'), 'virtualNetwork-', parameters('virtualNetworkNewOrExisting'), '.json)]",
        "creatingPublicIpUrl": "[concat(variables('artifactsLocation'), 'publicIp-', parameters('publicIpNewOrExisting'), '.json')]",
        "creatingStorageAccountUrl": "[concat(variables('artifactsLocation'), 'storageAccount-', parameters('vhdStorageNewOrExisting'), '.json')]",
        "creatingLoadBalancerUrl": "[concat(variables('artifactsLocation'), 'creatingLoadBalancer.json')]",
        "updatingVnetDnsUrl": "[concat(variables('artifactsLocation'), 'updatingVnetDns.json')]",
        "updatingNicRulesUrl": "[concat(variables('artifactsLocation'), 'updatingNicRules.json')]",
        "updatingInboundRuleUrl": "[concat(variables('artifactsLocation'), 'updatingInboundRule.json')]",
        "availabilitySetName": "AvailabilitySet",
        "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "loadBalancerSettings": {
            "name": "LoadBalancer",
            "id": "[resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer')]",
            "lbapid": "[concat( resourceId('Microsoft.Network/loadBalancers','loadBalancer'), '/backendAddressPools/LBBAP')]",
            "rulesPath": "[concat(resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer'), '/inboundNatRules/')]",
            "defaultInboundRules": [
                {
                    "name": "ns-http",
                    "frontendPort": "[variables('ports').http]",
                    "backendPort": 80
                },
                {
                    "name": "ns-https",
                    "frontendPort": "[variables('ports').https]",
                    "backendPort": 11443
                },
                {
                    "name": "jump-rdp",
                    "frontendPort": 3389,
                    "backendPort": 3389
                }
            ]
        },
        "jumpBoxSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingJumpBox.json')]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "machineName": "XA-JumpBox",
            "machineSize": "[parameters('machineSize')]",
            "location": "[parameters('location')]",
            "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/JumpBox.ps1.zip')]",
            "configurationFunction": "JumpBox.ps1\\JumpBox",
            "inboundRules": [
                {
                    "id": "[concat(variables('loadBalancerSettings').rulesPath, 'jump-rdp')]"
                }
            ],
            "shortcuts": [
                "[variables('applications')[0]]",
                "[variables('applications')[1]]",
                "[variables('applications')[2]]",
                "[variables('applications')[3]]",
                "[variables('applications')[4]]"
            ]
        },
        "domainControllerSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingDomainController.json')]",
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "machineName": "[parameters('domainControllerMachineName')]",
            "fqdn": "[concat(parameters('domainControllerMachineName'), '.', parameters('domainName'))]",
            "machineSize": "[parameters('machineSize')]",
            "location": "[parameters('location')]",
            "privateIp": "[parameters('dnsServers')[0]]",
            "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DomainController.ps1.zip')]",
            "configurationFunction": "DomainController.ps1\\DomainController",
            "inboundRules": []
        },
        "sqlServerSettings": {
            "machineName": "[variables('deliveryControllerSettings').machineName]",
            "fqdn": "localhost",
            "instance": "SQLEXPRESS"
        },
        "deliveryControllerSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingDeliveryController', parameters('imageType'), '.json')]",
            "extensionUri": "[concat(variables('artifactsLocation'), 'creatingDeliveryControllerGalleryExtension.json')]",
            "userImageUri": "[concat(variables('userImageLocation'), 'XD-ALL.vhd')]",
            "publisher": "citrix",
            "offer": "[concat('xenapp-server', parameters('imageQualifier'))]",
            "sku": "coldfireserver",
            "machineName": "XA-Controller",
            "fqdn": "[concat('XA-Controller', '.', parameters('domainName'))]",
            "machineSize": "[parameters('machineSize')]",
            "location": "[parameters('location')]",
            "privateIp": "[parameters('deliveryControllerPrivateIp')]",
            "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DeliveryController.ps1.zip')]",
            "configurationFunction": "DeliveryController.ps1\\DeliveryController",
            "inboundRulesInitial": [
                {
                    "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]"
                }
            ],
            "inboundRulesFinal": []
        },
        "licenseServerSettings": {
            "machineName": "[variables('deliveryControllerSettings').machineName]",
            "fqdn": "[variables('deliveryControllerSettings').fqdn]",
            "privateIp": "[variables('deliveryControllerSettings').privateIp]"
        },
        "storeFrontSettings": {
            "machineName": "[variables('deliveryControllerSettings').machineName]",
            "fqdn": "[variables('deliveryControllerSettings').fqdn]",
            "privateIp": "[variables('deliveryControllerSettings').privateIp]",
            "httpPort": "[variables('ports').http]",
            "gatewayName": "NetScaler",
            "themeUri": "[concat(variables('artifactsLocation'), 'Resources/receivertheme.tar.gz')]",
            "html5Mode": "[parameters('html5Mode')]",
            "appGroups": [
                {
                    "title": "Administrative Apps",
                    "description": "Applications for a XenApp administrator",
                    "tile": "appBundle1",
                    "category": "Administrative Apps"
                },
                {
                    "title": "Remote Desktop Connections",
                    "description": "Connect to machines in the XenApp deployment",
                    "tile": "appBundle2",
                    "category": "Remote Desktop Connections"
                },
                {
                    "title": "NetScaler Management",
                    "description": "Applications for a NetScaler administrator",
                    "tile": "appBundle3",
                    "category": "NetScaler Management"
                },
                {
                    "title": "Office 365 Apps",
                    "description": "Applications for a Office 365",
                    "tile": "appBundle3",
                    "category": "Office Applications"
                }
            ]
        },
        "directorSettings": {
            "machineName": "[variables('deliveryControllerSettings').machineName]",
            "fqdn": "[variables('deliveryControllerSettings').fqdn]",
            "privateIp": "[variables('deliveryControllerSettings').privateIp]"
        },
        "netScalerSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingNetscalerGallery.json')]",
            "userImageUri": "[concat(variables('userImageLocation'), 'ns-vpx.vhd')]",
            "publisher": "citrix",
            "offer": "[concat('netscalervpx111')]",
            "sku": "netscalerbyol",
            "version": "111.50.10",
            "virtualServerName": "StoreFront",
            "httpsPort": "[variables('ports').netScalerHttps]",
            "httpPort": "[variables('ports').netScalerHttp]",
            "machineName": "XA-NetScaler",
            "location": "[parameters('location')]",
            "fqdn": "[concat('XA-NetScaler', '.', parameters('domainName'))]",
            "machineSize": "[parameters('machineSize')]",
            "privateIp": "[parameters('netscalerPrivateIp')]",
            "inboundRulesInitial": [
                {
                    "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]"
                }
            ],
            "inboundRulesFinal": [
                {
                    "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]"
                },
                {
                    "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]"
                }
            ]
        },
        "ports": {
            "http": 80,
            "https": 443,
            "netScalerHttps": 11443,
            "netScalerHttp": 11480
        },
        "paths": {
            "iePath": "C:\\Program Files\\Internet Explorer\\iexplore.exe",
            "studioPath": "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Citrix\\Citrix Studio.lnk",
            "rdpPath": "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Remote Desktop Connection.lnk",
            "storeFrontUrl": "[concat('https://', variables('storeFrontSettings').machineName, '.', parameters('domainName'), '/Citrix/Store')]",
            "directorUrl": "[concat('https://', variables('directorSettings').machineName, '.', parameters('domainName'), '/director')]",
            "netScalerUrl": "[concat('http://', variables('netScalerSettings').privateIp)]",
            "outlookPath": "C:\\Program Files\\Microsoft Office 15\\root\\office15\\OUTLOOK.EXE",
            "wordPath": "C:\\Program Files\\Microsoft Office 15\\root\\office15\\WINWORD.EXE",
            "excelPath": "C:\\Program Files\\Microsoft Office 15\\root\\office15\\EXCEL.EXE",
            "onenotePath": "C:\\Program Files\\Microsoft Office 15\\root\\office15\\ONENOTE.EXE",
            "powerpointPath": "C:\\Program Files\\Microsoft Office 15\\root\\office15\\POWERPNT.EXE"
        },
        "icons": {
            "outlookIcon": "C:\\Program Files\\Microsoft Office 15\\root\\icons\\outlook.ico",
            "excelIcon": "C:\\Program Files\\Microsoft Office 15\\root\\icons\\excel.ico",
            "onenoteIcon": "C:\\Program Files\\Microsoft Office 15\\root\\icons\\onenote.ico",
            "powerpointIcon": "C:\\Program Files\\Microsoft Office 15\\root\\icons\\powerpoint.ico",
            "wordIcon": "C:\\Program Files\\Microsoft Office 15\\root\\icons\\word.ico"
        },
        "applications": [
            {
                "name": "Domain Controller",
                "category": "Remote Desktop Connections",
                "path": "[variables('paths').rdpPath]",
                "icon": "[variables('paths').rdpPath]",
                "arguments": "[concat('/v:', variables('domainControllerSettings').machineName, '.', parameters('domainName'))]"
            },
            {
                "name": "XenApp Controller",
                "category": "Remote Desktop Connections",
                "path": "[variables('paths').rdpPath]",
                "icon": "[variables('paths').rdpPath]",
                "type": "Shortcut",
                "arguments": "[concat('/v:', variables('deliveryControllerSettings').machineName, '.', parameters('domainName'))]"
            },
            {
                "name": "XenApp VDA",
                "category": "Remote Desktop Connections",
                "path": "[variables('paths').rdpPath]",
                "icon": "[variables('paths').rdpPath]",
                "arguments": "[concat('/v:', 'XA-VDA', '.', parameters('domainName'))]"
            },
            {
                "name": "NetScaler Web UI",
                "category": "NetScaler Management",
                "path": "[variables('paths').iePath]",
                "icon": "[variables('paths').iePath]",
                "arguments": "[variables('paths').netScalerUrl]"
            },
            {
                "name": "XenApp Server VDI",
                "category": "Remote Desktop Connections",
                "path": "[variables('paths').rdpPath]",
                "icon": "[variables('paths').rdpPath]",
                "arguments": "[concat('/v:', 'XA-VDI', '.', parameters('domainName'))]"
            },
            {
                "name": "Citrix Director",
                "category": "Administrative Apps",
                "path": "[variables('paths').iePath]",
                "icon": "[variables('paths').studioPath]",
                "arguments": "[variables('paths').directorUrl]"
            },
            {
                "name": "Citrix Studio",
                "category": "Administrative Apps",
                "path": "[variables('paths').studioPath]",
                "icon": "[variables('paths').studioPath]",
                "type": "Shortcut",
                "arguments": ""
            }
        ],
        "vdaSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingVda', parameters('imageType'), '.json')]",
            "extensionUri": "[concat(variables('artifactsLocation'), 'creatingVdaGalleryExtension.json')]",
            "userImageUri": "[concat(variables('userImageLocation'), 'XD-VDA.vhd')]",
            "publisher": "citrix",
            "offer": "[concat('xenapp-vda-rdsh', parameters('imageQualifier'))]",
            "sku": "[concat(parameters('vdaVersion'),'rdsh')]",
            "vdaPrefix": "XA-VDA",
            "machineSize": "[parameters('machineSize')]",
            "location": "[parameters('location')]",
            "vdaCount": 1,
            "privateIp": "[parameters('vdaPrivateIp')]",
            "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDA.ps1.zip')]",
            "configurationFunction": "VDA.ps1\\VDA",
            "prepareConfigurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/PrepareVDA.ps1.zip')]",
            "prepareConfigurationFunction": "PrepareVDA.ps1\\PrepareVDA",
            "inboundRules": [],
            "chocolateyPackages": [],
            "publishedApplications": "[variables('applications')]"
        },
        "vdiSettings": {
            "templateUri": "[concat(variables('artifactsLocation'), 'creatingVda', parameters('imageType'), '.json')]",
            "extensionUri": "[concat(variables('artifactsLocation'), 'creatingVdaGalleryExtension.json')]",
            "userImageUri": "[concat(variables('userImageLocation'), 'XD-VDI.vhd')]",
            "publisher": "citrix",
            "offer": "[concat('xenapp-vda-vdi', parameters('imageQualifier'))]",
            "sku": "[concat(parameters('vdaVersion'),'vdi')]",
            "vdaPrefix": "XA-VDI",
            "machineSize": "[parameters('machineSize')]",
            "location": "[parameters('location')]",
            "vdaCount": 1,
            "privateIp": "[parameters('vdiPrivateIp')]",
            "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDI.ps1.zip')]",
            "configurationFunction": "VDI.ps1\\VDI",
            "prepareConfigurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/PrepareVDI.ps1.zip')]",
            "prepareConfigurationFunction": "PrepareVDI.ps1\\PrepareVDI",
            "inboundRules": [],
            "chocolateyPackages": [],
            "publishedApplications": []
        }
    },
    "resources": [
        {
            "apiVersion": "2015-06-15",
            "name": "[variables('availabilitySetName')]",
            "type": "Microsoft.Compute/availabilitySets",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "tags": {
                "displayName": "AvailabilitySet"
            },
            "properties": {
                "platformFaultDomainCount": 2
            }
        },
        {
            "name": "CreatingVirtualNetwork",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('creatingVirtualNetworkUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetworkName": {
                        "value": "[variables('vnetName')]"
                    },
                    "newVnetRegion": {
                        "value": "[parameters('location')]"
                    },
                    "newVnetAddressRange": {
                        "value": "[variables('vnetAddressRange')]"
                    },
                    "newSubnetName": {
                        "value": "[variables('subnetName')]"
                    },
                    "newSubnetAddressRange": {
                        "value": "[variables('subnetAddressRange')]"
                    }
                }
            }
        },
        {
            "name": "CreatingPublicIp",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingVirtualNetwork"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('creatingPublicIpUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "publicDnsName": {
                        "value": "[parameters('publicDnsName')]"
                    },
                    "publicIpGroup": {
                        "value": "[parameters('publicIpGroup')]"
                    },
                    "publicIpName": {
                        "value": "[parameters('publicIpName')]"
                    }
                }
            }
        },
        {
            "name": "CreatingStorageAccount",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('creatingStorageAccountUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "vhdStorageType": {
                        "value": "[parameters('vhdStorageType')]"
                    },
                    "vhdStorageGroup": {
                        "value": "[parameters('vhdStorageGroup')]"
                    }
                }
            }
        },
        {
            "name": "CreatingLoadBalancer",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingVirtualNetwork",
                "Microsoft.Compute/availabilitySets/availabilitySet"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('creatingLoadBalancerUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "publicIpName": {
                        "value": "[parameters('publicIpName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "publicIpGroup": {
                        "value": "[parameters('publicIpGroup')]"
                    },
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerSettings').name]"
                    },
                    "inboundRules": {
                        "value": "[concat(variables('loadBalancerSettings').defaultInboundRules, parameters('customInboundRules').rules)]"
                    }
                }
            }
        },
        {
            "name": "CreatingJumpBox",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/UpdatingVnetDns",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('jumpBoxSettings').templateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "machineSize": {
                        "value": "[variables('jumpBoxSettings').machineSize]"
                    },
                    "machineName": {
                        "value": "[variables('jumpBoxSettings').machineName]"
                    },
                    "publisher": {
                        "value": "[variables('jumpBoxSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('jumpBoxSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('jumpBoxSettings').sku]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('jumpBoxSettings').inboundRules, parameters('customInboundRules').assignments.jumpBox)]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "shortcuts": {
                        "value": "[variables('jumpBoxSettings').shortcuts]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('jumpBoxSettings').configurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('jumpBoxSettings').configurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingNetScaler",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/UpdatingVnetDns"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('netScalerSettings').templateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "machineSize": {
                        "value": "[variables('netScalerSettings').machineSize]"
                    },
                    "publisher": {
                        "value": "[variables('netScalerSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('netScalerSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('netScalerSettings').sku]"
                    },
                    "version": {
                        "value": "[variables('netScalerSettings').version]"
                    },
                    "machineName": {
                        "value": "[variables('netScalerSettings').machineName]"
                    },
                    "privateIp": {
                        "value": "[variables('netScalerSettings').privateIp]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('netScalerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.netScaler)]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingDeliveryController",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingNetScaler",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingNetScaler"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('deliveryControllerSettings').templateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('deliveryControllerSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('deliveryControllerSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('deliveryControllerSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('deliveryControllerSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('deliveryControllerSettings').machineSize]"
                    },
                    "machineName": {
                        "value": "[variables('deliveryControllerSettings').machineName]"
                    },
                    "privateIp": {
                        "value": "[variables('deliveryControllerSettings').privateIp]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('deliveryControllerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.deliveryController)]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "domainCcsontrollerPrivateIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "sqlServerFQDN": {
                        "value": "[variables('sqlServerSettings').fqdn]"
                    },
                    "sqlServerInstance": {
                        "value": "[variables('sqlServerSettings').instance]"
                    },
                    "licenseServerFQDN": {
                        "value": "[variables('licenseServerSettings').fqdn]"
                    },
                    "netScalerPrivateIp": {
                        "value": "[variables('netScalerSettings').privateIp]"
                    },
                    "storeFrontFQDN": {
                        "value": "[variables('storeFrontSettings').fqdn]"
                    },
                    "virtualServerName": {
                        "value": "[variables('netScalerSettings').virtualServerName]"
                    },
                    "virtualServerPort": {
                        "value": "[variables('netScalerSettings').httpsPort]"
                    },
                    "forwardServerPort": {
                        "value": "[variables('netScalerSettings').httpPort]"
                    },
                    "storeFrontGatewayName": {
                        "value": "[variables('storeFrontSettings').gatewayName]"
                    },
                    "emailAddress": {
                        "value": "[parameters('emailAddress')]"
                    },
                    "certificateAuthority": {
                        "value": "[parameters('certificateAuthority')]"
                    },
                    "acmeServer": {
                        "value": "[parameters('acmeServer')]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "deploymentFQDN": {
                        "value": "[variables('deploymentFQDN')]"
                    },
                    "themeUri": {
                        "value": "[variables('storeFrontSettings').themeUri]"
                    },
                    "html5Mode": {
                        "value": "[variables('storeFrontSettings').html5Mode]"
                    },
                    "appGroups": {
                        "value": "[concat(variables('storeFrontSettings').appGroups, parameters('customApplications').appGroups)]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[concat(variables('deliveryControllerSettings').fqdn)]"
                    },
                    "siteName": {
                        "value": "[parameters('siteName')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('deliveryControllerSettings').configurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('deliveryControllerSettings').configurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingDeliveryControllerExtension",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingDeliveryController"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('deliveryControllerSettings').ExtensionUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('deliveryControllerSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('deliveryControllerSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('deliveryControllerSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('deliveryControllerSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('deliveryControllerSettings').machineSize]"
                    },
                    "machineName": {
                        "value": "[variables('deliveryControllerSettings').machineName]"
                    },
                    "privateIp": {
                        "value": "[variables('deliveryControllerSettings').privateIp]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('deliveryControllerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.deliveryController)]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "domainControllerPrivateIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "sqlServerFQDN": {
                        "value": "[variables('sqlServerSettings').fqdn]"
                    },
                    "sqlServerInstance": {
                        "value": "[variables('sqlServerSettings').instance]"
                    },
                    "licenseServerFQDN": {
                        "value": "[variables('licenseServerSettings').fqdn]"
                    },
                    "netScalerPrivateIp": {
                        "value": "[variables('netScalerSettings').privateIp]"
                    },
                    "storeFrontFQDN": {
                        "value": "[variables('storeFrontSettings').fqdn]"
                    },
                    "virtualServerName": {
                        "value": "[variables('netScalerSettings').virtualServerName]"
                    },
                    "virtualServerPort": {
                        "value": "[variables('netScalerSettings').httpsPort]"
                    },
                    "forwardServerPort": {
                        "value": "[variables('netScalerSettings').httpPort]"
                    },
                    "storeFrontGatewayName": {
                        "value": "[variables('storeFrontSettings').gatewayName]"
                    },
                    "emailAddress": {
                        "value": "[parameters('emailAddress')]"
                    },
                    "certificateAuthority": {
                        "value": "[parameters('certificateAuthority')]"
                    },
                    "acmeServer": {
                        "value": "[parameters('acmeServer')]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "deploymentFQDN": {
                        "value": "[variables('deploymentFQDN')]"
                    },
                    "themeUri": {
                        "value": "[variables('storeFrontSettings').themeUri]"
                    },
                    "html5Mode": {
                        "value": "[variables('storeFrontSettings').html5Mode]"
                    },
                    "appGroups": {
                        "value": "[concat(variables('storeFrontSettings').appGroups, parameters('customApplications').appGroups)]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[concat(variables('deliveryControllerSettings').fqdn)]"
                    },
                    "siteName": {
                        "value": "[parameters('siteName')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('deliveryControllerSettings').configurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('deliveryControllerSettings').configurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingVda",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingDeliveryController"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vdaSettings').templateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('vdaSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('vdaSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('vdaSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('vdaSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('vdaSettings').machineSize]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "machineName": {
                        "value": "[variables('vdaSettings').vdaPrefix]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "privateIp": {
                        "value": "[variables('vdaSettings').privateIp]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('vdaSettings').inboundRules, parameters('customInboundRules').assignments.vda)]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "domainControllerIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[variables('deliveryControllerSettings').fqdn]"
                    },
                    "packages": {
                        "value": "[concat(variables('vdaSettings').chocolateyPackages, parameters('customApplications').chocolateyPackages)]"
                    },
                    "publishedApplications": {
                        "value": "[concat(variables('vdaSettings').publishedApplications, parameters('customApplications').publishedApplications)]"
                    },
                    "storeFrontUrl": {
                        "value": "[variables('paths').storeFrontUrl]"
                    },
                    "deploymentFQDN": {
                        "value": "[variables('deploymentFQDN')]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('vdaSettings').prepareConfigurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('vdaSettings').prepareConfigurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingVdaExtension",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingVda",
                "Microsoft.Resources/deployments/CreatingDeliveryControllerExtension"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vdaSettings').extensionUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('vdaSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('vdaSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('vdaSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('vdaSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('vdaSettings').machineSize]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "machineName": {
                        "value": "[variables('vdaSettings').vdaPrefix]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "privateIp": {
                        "value": "[variables('vdaSettings').privateIp]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('vdaSettings').inboundRules, parameters('customInboundRules').assignments.vda)]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "domainControllerIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[variables('deliveryControllerSettings').fqdn]"
                    },
                    "packages": {
                        "value": "[concat(variables('vdaSettings').chocolateyPackages, parameters('customApplications').chocolateyPackages)]"
                    },
                    "publishedApplications": {
                        "value": "[concat(variables('vdaSettings').publishedApplications, parameters('customApplications').publishedApplications)]"
                    },
                    "storeFrontUrl": {
                        "value": "[variables('paths').storeFrontUrl]"
                    },
                    "deploymentFQDN": {
                        "value": "[variables('deploymentFQDN')]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('vdaSettings').configurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('vdaSettings').configurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingVdi",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingVda"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vdiSettings').templateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('vdiSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('vdiSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('vdiSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('vdiSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('vdiSettings').machineSize]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "machineName": {
                        "value": "[variables('vdiSettings').vdaPrefix]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "privateIp": {
                        "value": "[variables('vdiSettings').privateIp]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('vdiSettings').inboundRules, parameters('customInboundRules').assignments.vdi)]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[variables('deliveryControllerSettings').fqdn]"
                    },
                    "domainControllerIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "packages": {
                        "value": "[variables('vdiSettings').chocolateyPackages]"
                    },
                    "publishedApplications": {
                        "value": "[variables('vdiSettings').publishedApplications]"
                    },
                    "storeFrontUrl": {
                        "value": "[variables('paths').storeFrontUrl]"
                    },
                    "deploymentFQDN": {
                        "value": "[variables('deploymentFQDN')]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('vdiSettings').prepareConfigurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('vdiSettings').prepareConfigurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "CreatingVdiExtensions",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingLoadBalancer",
                "Microsoft.Resources/deployments/CreatingStorageAccount",
                "Microsoft.Resources/deployments/CreatingPublicIp",
                "Microsoft.Resources/deployments/CreatingVdi"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vdiSettings').extensionUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vhdStorageAccount": {
                        "value": "[parameters('vhdStorageAccount')]"
                    },
                    "imageUri": {
                        "value": "[variables('vdiSettings').userImageUri]"
                    },
                    "publisher": {
                        "value": "[variables('vdiSettings').publisher]"
                    },
                    "offer": {
                        "value": "[variables('vdiSettings').offer]"
                    },
                    "sku": {
                        "value": "[variables('vdiSettings').sku]"
                    },
                    "machineSize": {
                        "value": "[variables('vdiSettings').machineSize]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "machineName": {
                        "value": "[variables('vdiSettings').vdaPrefix]"
                    },
                    "availabilitySetId": {
                        "value": "[variables('availabilitySetId')]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "dnsServers": {
                        "value": "[variables('dnsServers')]"
                    },
                    "privateIp": {
                        "value": "[variables('vdiSettings').privateIp]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "lbInboundRules": {
                        "value": "[concat(variables('vdiSettings').inboundRules, parameters('customInboundRules').assignments.vdi)]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainControllerFQDN": {
                        "value": "[variables('domainControllerSettings').fqdn]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "deliveryControllerFQDN": {
                        "value": "[variables('deliveryControllerSettings').fqdn]"
                    },
                    "domainControllerIp": {
                        "value": "[variables('domainControllerSettings').privateIp]"
                    },
                    "packages": {
                        "value": "[variables('vdiSettings').chocolateyPackages]"
                    },
                    "publishedApplications": {
                        "value": "[variables('vdiSettings').publishedApplications]"
                    },
                    "storeFrontUrl": {
                        "value": "[variables('paths').storeFrontUrl]"
                    },
                    "deploymentFQDN": {
                        "value": "[reference('CreatingPublicIp').outputs.fqdn.value]"
                    },
                    "gatewayFQDN": {
                        "value": "[variables('gatewayFQDN')]"
                    },
                    "artifactsLocationUri": {
                        "value": "[variables('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[variables('artifactsLocationSasToken')]"
                    },
                    "dscVersion": {
                        "value": "[variables('dscVersion')]"
                    },
                    "configurationFileUrl": {
                        "value": "[variables('vdiSettings').configurationFileUrl]"
                    },
                    "configurationFunction": {
                        "value": "[variables('vdiSettings').configurationFunction]"
                    },
                    "azureGov": {
                        "value": "[parameters('azureGov')]"
                    }
                }
            }
        },
        {
            "name": "UpdatingInboundRules",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatingDeliveryControllerExtension"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('updatingInboundRuleUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerSettings').name]"
                    },
                    "loadBalancerId": {
                        "value": "[variables('loadBalancerSettings').id]"
                    },
                    "inboundRuleName": {
                        "value": "ns-http"
                    },
                    "frontendPort": {
                        "value": "[variables('ports').http]"
                    },
                    "backendPort": {
                        "value": "[variables('netScalerSettings').httpPort]"
                    }
                }
            }
        },
        {
            "name": "UpdatingDeliveryControllerNic",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/UpdatingInboundRules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('updatingNicRulesUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "nicName": {
                        "value": "[reference('CreatingDeliveryController').outputs.nicName.value]"
                    },
                    "privateIp": {
                        "value": "[variables('deliveryControllerSettings').privateIp]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "rules": {
                        "value": "[concat(variables('deliveryControllerSettings').inboundRulesFinal, parameters('customInboundRules').assignments.deliveryController)]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "name": "UpdatingNetScalerNic",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "Microsoft.Resources/deployments/UpdatingDeliveryControllerNic"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('updatingNicRulesUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "nicName": {
                        "value": "[reference('CreatingNetScaler').outputs.nicName.value]"
                    },
                    "privateIp": {
                        "value": "[variables('netScalerSettings').privateIp]"
                    },
                    "subnetId": {
                        "value": "[variables('subnetId')]"
                    },
                    "lbBapId": {
                        "value": "[variables('loadBalancerSettings').lbapid]"
                    },
                    "rules": {
                        "value": "[concat(variables('netScalerSettings').inboundRulesFinal, parameters('customInboundRules').assignments.netScaler)]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "netScalerGateway": {
            "type": "string",
            "value": "[concat('https://', variables('gatewayFQDN'))]"
        }
    }
}